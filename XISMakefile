#
# XISMakefile
#

VER		= 20120910

# History
# 20100901 - GTIフィルタ対応 (Default/Specific両対応)
# 20101129 - Cleaned Eventにxispiをかけていたのを止めた
# 20101201 - aepipeline後のデータに対応
# 20101204 - NXB生成をPINUDに対応
# 20111114 - 生成物をgzip
# 20111121 - QDPに対応
# 20120217 - COR Screeningに対応
# 20120910 - 5x5が無い場合には無視

# Programs
XSEL	= xselect
XSELW	= xselect-wrapper
XSPEC	= xspec
PI		= xispi
PLRN	= punlearn
CSIS	= cleansis
RMFGEN	= xisrmfgen
ARFGEN	= xissimarfgen
NXBGEN	= xisnxbgen
ADDARF	= addarf
MARFRMF	= marfrmf
MKPINHK = aemkpinudhk
QDP		= qdp

# External Parameter Filename
PARAM	= _Parameters.txt

# Default Parameters (to be overriden by _Paramter.txt)

# Project Name (default to the current directory name)
PJNAME			:= $(shell basename $(shell pwd))
# Instruments (default to XIS1)
INSTRM			:= xi1
# ARF Gen parallel count (default to 1)
NPROCS			:= 1
# ARF Gen num_photon Parameter (default to program default)
ARF_PCNT		:= 1000000
# NXB Gen time_min/max Parameter (default to program default)
NXB_TIME_MIN	:= -150
NXB_TIME_MAX	:= +150
# XSelect Default GTI Filter File (default to null)
GTI_FILE		:=
# NXB Gen Sortkey
NXB_SORTKEY		:= COR2

# Override Default Parameters
-include $(PARAM)

# Runtime Paramters (to be overriden by make option)

# XSELECT pha_cutoff Parameter (default to no filter)
PHACUTOFF		:=
# XSELECT region file (default to no filter)
REGION			:=
# XSELECT image bin size
IMGBIN			:= 8
# NXB Gen Sortstep and EHK Margin Seconds (PINUD only)
NXB_COR_STEP	:= "0,4,5,6,7,8,9,10,11,12,13,99"
NXB_PINUD_STEP	:= "100,150,175,200,225,250,275,300,325,350,375,400,425,450,500"
NXB_EHK_MARGIN	:= 30.0
# COR Screening (using COR2)
COR				:=

# Common Files
XISROOT		:= $(ROOT)/xis
HXDROOT		:= $(ROOT)/hxd
SRC3x3		:= $(wildcard $(XISROOT)/event_cl/ae*$(INSTRM)*3x3*.evt*)
SRC5x5		:= $(wildcard $(XISROOT)/event_cl/ae*$(INSTRM)*5x5*.evt*)
HKFILE		:= $(wildcard $(XISROOT)/hk/ae*$(INSTRM)*.hk*)
EHKFILE		:= $(wildcard $(ROOT)/auxil/ae*.ehk*)
ATTFILE		:= $(wildcard $(ROOT)/auxil/ae*.att*)
ORBFILE		:= $(wildcard $(ROOT)/auxil/ae*.orb*)
HXDHKFILE	:= $(wildcard $(HXDROOT)/hk/ae*_0.hk*)

# Initialization

.SUFFIXES:
.SUFFIXES: .evt .csis .reg .gti .pha .lc .img .fits .rmf .arf .parf .rsp .prsp .nxb .pinud .ps .eps .pdf .qdp .txt .gz

.PRECIOUS: %.evt.gz %.pha.gz %.rsp.gz %.prsp.gz %.nxb.gz

.INTERMEDIATE: $(PJNAME)_3x3.csis $(PJNAME)_5x5.csis $(PJNAME).evt %.pha %.rmf %.arf %.parf %.rsp %.prsp %.nxb

# Instrument Full Name
INSTRMF	:= XIS$(subst xi,,$(INSTRM))

# Construct XSELW Commands
XSELCMD :=
ifneq ($(PHACUTOFF),)
	XSELCMD := $(XSELCMD) -c "$(PHACUTOFF)"
endif
ifneq ($(REGION),)
	XSELCMD := $(XSELCMD) -r $(REGION)
endif
ifneq ($(IMGBIN),)
	XSELCMD := $(XSELCMD) -b $(IMGBIN)
endif
ifneq ($(GTI_FILE),)
	XSELCMD := $(XSELCMD) -g $(GTI_FILE)
endif
ifneq ($(COR),)
	XSELCMD := $(XSELCMD) -h $(EHKFILE) -C $(COR)
endif

#
# Targets
#
.PHONY : all

all :
	@echo XISMake Version: $(VER)
	@echo Please state a target from : param event image lc spec rsp nxb xspec
	@echo For image and lc, following run-time parameters can be set: PHACUTOFF, REGION, IMGBIN

# XSPEC (spec rsp nxb)
.PHONY : xspec

xspec : spec rsp nxb

# NXB
.PHONY : nxb

nxb : $(PJNAME).nxb.gz

# NXB from PINUD
ifeq ($(NXB_SORTKEY),PINUD)

%.nxb : %.pha.gz %.reg $(PJNAME).pinud $(ATTFILE) $(ORBFILE)
	-rm -f $@
	$(NXBGEN) \
		$@ \
		$< \
		SKYREG \
		$*.reg \
		$(ORBFILE) \
		$(ATTFILE) \
		sortkey=$(NXB_SORTKEY) \
		sortstep=$(NXB_PINUD_STEP) \
		ehkfile=$(PJNAME).pinud \
		ehk_margin_sec=$(NXB_EHK_MARGIN) \
		pixq_and=0 pi_min=274 pi_max=548 \
		time_min=$(NXB_TIME_MIN) \
		time_max=$(NXB_TIME_MAX) \
		clobber=yes detmask=none

%.pinud : $(PJNAME).evt.gz $(HXDHKFILE) $(ORBFILE)
	-rm -f $@
	$(MKPINHK) \
		$@ \
		$(HXDHKFILE) \
		$< \
		$(ORBFILE)

else
# NXB from COR/COR2

%.nxb : %.pha.gz %.reg $(ATTFILE) $(ORBFILE)
	-rm -f $@
	$(NXBGEN) \
		$@ \
		$< \
		SKYREG \
		$*.reg \
		$(ORBFILE) \
		$(ATTFILE) \
		sortkey=$(NXB_SORTKEY) \
		sortstep=$(NXB_COR_STEP) \
		pixq_and=0 pi_min=274 pi_max=548 \
		time_min=$(NXB_TIME_MIN) \
		time_max=$(NXB_TIME_MAX) \
		clobber=yes detmask=none

endif

# Response
.PHONY : rsp

rsp : $(PJNAME).rsp.gz

%.rsp : %.rmf %.arf
	-rm -f $@
	$(MARFRMF) $*.rmf $*.arf $@
	-rm -f $*.rmf $*.arf

# Response for Point Src
.PHONY : prsp

prsp : $(PJNAME).prsp.gz

%.prsp : %.rmf %.parf
	-rm -f $@
	$(MARFRMF) $*.rmf $*.parf $@

# ARF

# ARF Generation in Parallel
ifeq ($(NPROCS),1)

# RMF to ARF (Single Thread)
%.arf : %.rmf $(PJNAME).evt.gz %.reg %.pha.gz $(ATTFILE)
	-rm -f $@
	$(ARFGEN) \
		clobber=yes \
		instrume=$(INSTRMF) \
		teldef=CALDB \
		leapfile=CALDB \
		mirrorfile=CALDB \
		reflectfile=CALDB \
		backproffile=CALDB \
		shieldfile=CALDB \
		calmaskfile='none' \
		pointing=AUTO \
		source_mode=UNIFORM \
		source_rmin=0 \
		source_rmax=20 \
		num_region=1 \
		region_mode=SKYREG \
		regfile1=$*.reg \
		arffile1=$@ \
		limit_mode=MIXED \
		num_photon=$(ARF_PCNT) \
		accuracy=0.005 \
		phafile=$*.pha.gz \
		detmask='none' \
		gtifile=$(PJNAME).evt.gz \
		attitude=$(ATTFILE) \
		rmffile=$< \
		estepfile=medium

else

# RMF to ARF (Multi Thread)

PID		:= $(shell echo $$$$)
ARFCMD	:= .arfcmd.$(PID)
ARFLIST	:= .arflist.$(PID)

%.arf : %.rmf $(PJNAME).evt.gz %.reg %.pha.gz $(ATTFILE)
	-rm -f $@
	-rm -f $(ARFCMD) $(ARFLIST)
	for i in {1..$(NPROCS)}; \
	do \
		echo \
			clobber=yes \
			instrume=$(INSTRMF) \
			teldef=CALDB \
			leapfile=CALDB \
			mirrorfile=CALDB \
			reflectfile=CALDB \
			backproffile=CALDB \
			shieldfile=CALDB \
			calmaskfile='none' \
			pointing=AUTO \
			source_mode=UNIFORM \
			source_rmin=0 \
			source_rmax=20 \
			num_region=1 \
			region_mode=SKYREG \
			regfile1=$*.reg \
			arffile1=$@$$i \
			limit_mode=MIXED \
			num_photon=`expr $(ARF_PCNT) / $(NPROCS)` \
			accuracy=0.005 \
			phafile=$*.pha.gz \
			detmask='none' \
			gtifile=$(PJNAME).evt.gz \
			attitude=$(ATTFILE) \
			rmffile=$< \
			estepfile=medium \
			rand_seed=$$i >>  $(ARFCMD); \
		echo $@$$i `echo 'scale=2; 1/$(NPROCS)' | bc` >> $(ARFLIST); \
	done
	cat $(ARFCMD) | xargs -L1 -t -P$(NPROCS) $(ARFGEN)
	$(ADDARF) @$(ARFLIST) out_ARF=$@
	-rm -f $@{1..$(NPROCS)}
	-rm -f $(ARFCMD) $(ARFLIST)

endif

# PARF

ifeq ($(NPROCS),1)

# RMF to Point-ARF (Single Thread)
%.parf : %.rmf $(PJNAME).evt.gz %.reg %.pha.gz $(ATTFILE)
	-test `grep -i circle $*.reg | wc -l` -ne 1 \
		(echo Error: Multiple regions not allowed. ; exit 1;)
	-rm -f $@
	$(ARFGEN) \
		clobber=yes \
		instrume=$(INSTRMF) \
		teldef=CALDB \
		leapfile=CALDB \
		mirrorfile=CALDB \
		reflectfile=CALDB \
		backproffile=CALDB \
		shieldfile=CALDB \
		calmaskfile='none' \
		pointing=AUTO \
		source_mode=SKYXY \
		source_x=`cat $*.reg | grep -i circle | sed -e 's/.*(\([^,]*\),.*/\1/'` \
		source_y=`cat $*.reg | grep -i circle | sed -e 's/.*([^,]*,\([^,]*\),.*/\1/'` \
		num_region=1 \
		region_mode=SKYREG \
		regfile1=$*.reg \
		arffile1=$@ \
		limit_mode=MIXED \
		num_photon=$(ARF_PCNT) \
		accuracy=0.005 \
		phafile=$*.pha.gz \
		detmask='none' \
		gtifile=$(PJNAME).evt.gz \
		attitude=$(ATTFILE) \
		rmffile=$< \
		estepfile=medium

else

# RMF to Point-ARF (Multi Thread)

PID		:= $(shell echo $$$$)
PARFCMD	:= .parfcmd.$(PID)
PARFLIST:= .parflist.$(PID)

%.parf : %.rmf $(PJNAME).evt.gz %.reg %.pha.gz $(ATTFILE)
	-rm -f $@
	-rm -f $(PARFCMD) $(PARFLIST)
	for i in {1..$(NPROCS)}; \
	do \
		echo \
			clobber=yes \
			instrume=$(INSTRMF) \
			teldef=CALDB \
			leapfile=CALDB \
			mirrorfile=CALDB \
			reflectfile=CALDB \
			backproffile=CALDB \
			shieldfile=CALDB \
			calmaskfile='none' \
			pointing=AUTO \
			source_mode=SKYXY \
			source_x=`cat $*.reg | grep -i circle | sed -e 's/.*(\([^,]*\),.*/\1/'` \
			source_y=`cat $*.reg | grep -i circle | sed -e 's/.*([^,]*,\([^,]*\),.*/\1/'` \
			num_region=1 \
			region_mode=SKYREG \
			regfile1=$*.reg \
			arffile1=$@$$i \
			limit_mode=MIXED \
			num_photon=`expr $(ARF_PCNT) / $(NPROCS)` \
			accuracy=0.005 \
			phafile=$*.pha.gz \
			detmask='none' \
			gtifile=$(PJNAME).evt.gz \
			attitude=$(ATTFILE) \
			rmffile=$< \
			estepfile=medium \
			rand_seed=$$i >>  $(PARFCMD); \
		echo $@$$i `echo 'scale=2; 1/$(NPROCS)' | bc` >> $(PARFLIST); \
	done
	cat $(PARFCMD) | xargs -L1 -t -P$(NPROCS) $(ARFGEN)
	$(ADDARF) @$(PARFLIST) out_ARF=$@
	-rm -f $@{1..$(NPROCS)}
	-rm -f $(PARFCMD) $(PARFLIST)

endif

# RMF

# PHA to RMF
%.rmf : %.pha.gz
	-rm -f $@
	$(RMFGEN) phafile=$< outfile=$@

# Spectrum
.PHONY : spec

spec : $(PJNAME).pha.gz

# EVT to PHA
%.pha : %.reg $(GTI_FILE) $(PJNAME).evt.gz
	-rm -f $@
	$(XSELW) -e spec $(XSELCMD) -r $< $(if $(wildcard $*.gti),-g $(wildcard $*.gti)) $(PJNAME).evt.gz $@

# Light Curve
.PHONY : lc

lc : $(PJNAME).lc

%.lc : $(PJNAME).evt.gz $(GTI_FILE)
	-rm -f $@
	$(XSELW) -e lc $(XSELCMD) $< $*

# Image
.PHONY : image

image : $(PJNAME).img

%.img : $(PJNAME).evt.gz $(GTI_FILE)
	-rm -f $@
	$(XSELW) -e image $(XSELCMD) $< $*

# Event
.PHONY : event

event : $(PJNAME).evt.gz

ifneq ($(SRC5x5),)

$(PJNAME).evt : $(PJNAME)_3x3.csis $(PJNAME)_5x5.csis
	-rm -f $@
	$(XSELW) -e event "$(PJNAME)_3x3.csis $(PJNAME)_5x5.csis" $@

else

$(PJNAME).evt : $(PJNAME)_3x3.csis
	@echo Warning: Only 3x3 is found.
	-rm -f $@
	$(XSELW) -e event "$(PJNAME)_3x3.csis" $@

endif

# Clean SIS
$(PJNAME)_3x3.csis : $(SRC3x3)
	-rm -f $@
	$(PLRN) $(CSIS)
	$(CSIS) \
		chipcol=SEGMENT \
		datafile=$(SRC3x3) \
		outfile=$@ \
		cellsize=5 \
		logprob=-5.3 \
		bthresh=3 \
		phamin=0 \
		phamax=4095

$(PJNAME)_5x5.csis : $(SRC5x5)
	-rm -f $@
	$(PLRN) $(CSIS)
	$(CSIS) \
		chipcol=SEGMENT \
		datafile=$(SRC5x5) \
		outfile=$@ \
		cellsize=5 \
		logprob=-5.3 \
		bthresh=3 \
		phamin=0 \
		phamax=4095

#.caldb.csis :
#	-rm -f $@
#	$(PLRN) $(CSIS)
#	$(CSIS) \
#		chipcol=SEGMENT \
#		datafile=$< \
#		outfile=$@ \
#		cellsize=5 \
#		logprob=-5.3 \
#		bthresh=3 \
#		phamin=0 \
#		phamax=4095

## CALDB
#%3x3.caldb : $(SRC3x3) $(HKFILE)
#	-rm -f $@
#	$(PI) infile=$(SRC3x3) outfile=$@ hkfile=$(HKFILE)
#
#%5x5.caldb : $(SRC5x5) $(HKFILE)
#	-rm -f $@
#	$(PI) infile=$(SRC5x5) outfile=$@ hkfile=$(HKFILE)

# Gzip
%.gz : %
	-rm -f $@
	gzip -9 <$< >$@

# QDP to PS
QDP_COMMAND := $(shell mktemp -u XXXXXX)
%.ps : %.qdp
	-rm -f $@
	echo "$*.ps/cps\nquit" > $(QDP_COMMAND)
	$(QDP) $< < $(QDP_COMMAND)
	rm $(QDP_COMMAND)

# EPS and PDF
.ps.eps :
	-rm -f $@
	ps2eps -R=+ --ignoreBB -l $<
	mv $@ $*-temp.eps
	eps2eps -dNOCACHE $*-temp.eps $@
	rm $*-temp.eps

.eps.pdf :
	-rm -f $@
	epstopdf $<

# Clean
.PHONY : clean

clean :
	rm -f *.evt *.evt.gz *.caldb *.csis *.pha *.pha.gz *.rmf *.arf *.parf *.rsp *.rsp.gz *.prsp *.prsp.gz *.nxb *.nxb.gz *.img *.lc

# Parameter
.PHONY : param

param : $(PARAM)

define PARAMETERS
# XIS Makefile Parameters
#
# Version: $(VER)

# Project Name
PJNAME		= $(PJNAME)

# Suzaku Data Source
ROOT		= ***CHANGE*HERE***

# Instrument Names (xi0/xi1/xi3)
INSTRM		= $(INSTRM)

# Parallel Job Count for ARF Gen
NPROCS		= $(NPROCS)

# Default GTI File
GTI_FILE	= $(GTI_FILE)

# ARF Gen Photon Count
ARF_PCNT	= $(ARF_PCNT)

# NXB Gen
NXB_TIME_MIN	= $(NXB_TIME_MIN)
NXB_TIME_MAX	= $(NXB_TIME_MAX)
NXB_SORTKEY		= $(NXB_SORTKEY)

endef
export PARAMETERS

$(PARAM) :
	@echo "$$PARAMETERS" > $@
	@echo Parameter file generated.
